// Generated by view binder compiler. Do not edit!
package com.example.quizgame.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.quizgame.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BarGameBinding implements ViewBinding {
  @NonNull
  private final Toolbar rootView;

  @NonNull
  public final ImageView heart0;

  @NonNull
  public final ImageView heart1;

  @NonNull
  public final ImageView heart2;

  @NonNull
  public final TextView lives;

  @NonNull
  public final TextView pointText;

  @NonNull
  public final Toolbar toolbar;

  private BarGameBinding(@NonNull Toolbar rootView, @NonNull ImageView heart0,
      @NonNull ImageView heart1, @NonNull ImageView heart2, @NonNull TextView lives,
      @NonNull TextView pointText, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.heart0 = heart0;
    this.heart1 = heart1;
    this.heart2 = heart2;
    this.lives = lives;
    this.pointText = pointText;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public Toolbar getRoot() {
    return rootView;
  }

  @NonNull
  public static BarGameBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BarGameBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.bar_game, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BarGameBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.heart0;
      ImageView heart0 = ViewBindings.findChildViewById(rootView, id);
      if (heart0 == null) {
        break missingId;
      }

      id = R.id.heart1;
      ImageView heart1 = ViewBindings.findChildViewById(rootView, id);
      if (heart1 == null) {
        break missingId;
      }

      id = R.id.heart2;
      ImageView heart2 = ViewBindings.findChildViewById(rootView, id);
      if (heart2 == null) {
        break missingId;
      }

      id = R.id.lives;
      TextView lives = ViewBindings.findChildViewById(rootView, id);
      if (lives == null) {
        break missingId;
      }

      id = R.id.point_text;
      TextView pointText = ViewBindings.findChildViewById(rootView, id);
      if (pointText == null) {
        break missingId;
      }

      Toolbar toolbar = (Toolbar) rootView;

      return new BarGameBinding((Toolbar) rootView, heart0, heart1, heart2, lives, pointText,
          toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
