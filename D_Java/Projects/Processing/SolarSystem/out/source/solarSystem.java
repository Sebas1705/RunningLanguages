/* autogenerated by Processing revision 1293 on 2024-02-15 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import peasy.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SolarSystem extends PApplet {



float theta = 0;
Bodie sun;
PeasyCam cam;
PImage sunI;
PImage back;
String[] childsImages;      

public void setup() {
  /* size commented out by preprocessor */;
  childsImages = new String[]{
    "./src/earthmap1k.jpg",
    "./src/jupitermap.jpg",
    "./src/mars_1k_color.jpg",
    "./src/mercurymap.jpg",
    "./src/neptunemap.jpg",
    "./src/plutomap1k.jpg",
    "./src/saturnmap.jpg",
    "./src/uranusmap.jpg",
    "./src/venusmap.jpg"
  };   
  cam = new PeasyCam(this,500);
  sunI = loadImage("./src/sunmap.jpg");
  back = loadImage("./src/back.jpg");
  back.resize(1400,800);
  sun = new Bodie(100,0,0,sunI);
  sun.spawnChildren(9,1);
  lights();
}

public void draw() {
  background(back);
  
  sun.show();
  sun.orbit();
  theta += 0.01f;
}

class Bodie{
    
    float radius,theta,distance,orbitSpeed;
    PVector v;
    PShape globe;
    PImage image;

    Bodie(float r,float d,float o,PImage texture){
        v=PVector.random3D();
        radius = r;
        theta = random(TWO_PI);
        distance = d;
        v.mult(distance);
        orbitSpeed = o;
        image=texture; 
        noStroke();
        noFill();
        globe = createShape(SPHERE,radius);
        globe.setTexture(image);
    }

    Bodie[] childs;

    private void spawnChildrenRecursive(int n,int level,int maxLevel){
        childs = new Bodie[n];
        float d = radius;
        for(int i=0;i<n;i++){
            float r=radius*random(0.1f,0.3f);
            d+=r+(i!=0?childs[i-1].radius:r)*random(4,8);
            float o=(random(0,1)>=0.5f?1:-1)*random(0.01f,0.02f);
            String p = childsImages[PApplet.parseInt(random(0,childsImages.length))];
            childs[i] = new Bodie(r,d,o,loadImage(p));
            if(level<maxLevel){
                childs[i].spawnChildrenRecursive(PApplet.parseInt(random(1,n-1)),level+1,maxLevel);
            }
        }
    }

    public void spawnChildren(int n,int maxLevel){
        spawnChildrenRecursive(n,0,maxLevel);
    }

    public void show(){
        pushMatrix();
        PVector v2 = new PVector(1,0,1);
        PVector p = v.cross(v2);
        rotate(theta,p.x,p.y,p.z);
        translate(v.x,v.y,v.z);
        shape(globe);
        if(childs!=null){
            for(Bodie c: childs){
                c.show();
            }
        }
        popMatrix();
    }

    public void orbit(){
        theta+=orbitSpeed;
        if(childs!=null){
            for(Bodie c: childs){
                c.orbit();
            }
        }
    }
}


  public void settings() { size(1400, 800, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SolarSystem" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
